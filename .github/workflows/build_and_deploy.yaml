on: [push, workflow_dispatch]

name: Simple app CI/CD workflow

jobs:
  build:
    name: build
    environment: dev
    runs-on: ubuntu-latest

    steps:
    - name: Checkout dev
      if: github.ref == 'refs/heads/dev'
      uses: actions/checkout@v3
      with:
          ref: dev

    - name: Checkout master
      if: github.ref == 'refs/heads/master'
      uses: actions/checkout@v3
      with:
          ref: master 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set image TAG
      id: generate_tag
      run: echo ::set-output name=IMAGE_TAG::$(echo `cat meta.json | jq -r .version`)-${GITHUB_RUN_NUMBER}
   
    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ steps.generate_tag.outputs.IMAGE_TAG }}
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    outputs:
      IMAGE_TAG: ${{ steps.generate_tag.outputs.IMAGE_TAG }}

    

  deploy_to_dev:
    needs: build
    name: deploy_to_Dev
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ecs
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Checkout Infra repo
      uses: actions/checkout@v3
      with:
        repository: zedex11/demo_infra
        token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
        ref: ${{ secrets.BRANCH }}
    

    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: |
        terraform init \
            -backend-config "bucket=dev-infra-test-1" \
            -backend-config "region=us-east-1" \
            -backend-config "key=tfstate/ecs/cluster/dev/terraform.tfstate"

    - name: Terraform Plan
      id: plan
      run: | 
        terraform plan

    
    - name: Terraform Apply
      id: apply
      run: | 
        terraform apply -var env_name=${{ secrets.ENV }} -var image_version=${{ needs.build.outputs.IMAGE_TAG }} -auto-approve


 deploy_to_prod:
    if: github.ref == 'refs/heads/master'
    needs: [build, deploy_to_Dev]
    name: deploy_to_Prod
    environment: prod
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ecs
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Checkout Infra repo
      uses: actions/checkout@v3
      with:
        repository: zedex11/demo_infra
        token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
        ref: ${{ secrets.BRANCH }}
    

    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: |
        terraform init \
            -backend-config "bucket=dev-infra-test-1" \
            -backend-config "region=us-east-1" \
            -backend-config "key=tfstate/ecs/cluster/dev/terraform.tfstate"

    - name: Terraform Plan
      id: plan
      run: | 
        terraform plan

    
    - name: Terraform Apply
      id: apply
      run: | 
        terraform apply -var env_name=${{ secrets.ENV }} -var image_version=${{ needs.build.outputs.IMAGE_TAG }} -auto-approve


